let ComponentMixin=t=>(class extends t{constructor(){super(),this.init(),this._prop=this._initProxy(),this.shadow=this.attachShadow({mode:"open"}),this.render()}_initProxy(){this._observedAttributes=this._getPropNames();let t=this._collectAndDeleteProperties();return new Proxy({props:t,instance:this},{get(e,r){if(!(r in e.props))throw Error("Permission denied.");Object.getOwnPropertyNames(e);if(!(r in t))throw Error("key not in property list");return e.props[r]},set(e,r,n){if(!(r in e.props))throw Error("Permission denied.");Object.getOwnPropertyNames(e);if(!(r in t))throw Error("key not in property list");e.props[r]=n,e.instance.render()}})}_getPropNames(){return Object.getOwnPropertyNames(this).filter(t=>"_prop"!=t)}_collectAndDeleteProperties(){let t={},e=this;return this._getPropNames().forEach(r=>{t[r]=e[r],delete this[r]}),t}_inArray(t,e){return 0!=t.filter(t=>t==e).length}getProp(t){return Reflect.get(this._prop,t)}setProp(t,e){Reflect.set(this._prop,t,e)}connectedCallback(){this.onInsert()}attributeChangedCallback(t,e,r){e!==r&&(this.setProp(t,r),this.onAttributeChange(t,e,r))}render(){this.shadow.innerHTML=this.dom();let t=document.createElement("style");t.textContent=this.style(),this.shadow.appendChild(t)}dom(){}style(){}onAttributeChange(t,e,r){}onInsert(){}});class Component extends(ComponentMixin(HTMLElement)){}export default Component;